[
    {
        "name": "kleine RISC-V",
        "info": {
            "en": "A small and simple rv32i core written in Verilog",
            "de": "Ein kleiner und einfacher rv32i Core, geschrieben in Verilog",
            "it": "Un piccolo e semplice core rv32i scritto in Verilog"
        },
        "link": "https://github.com/rolandbernard/kleine-riscv",
        "image": "kleine-riscv.jpeg",
        "tags": [ "verilog", "risc-v", "rv32i", "riscv32" ],
        "desc": "This is a small RISC-V core written in synthesizable Verilog that supports the RV32I unprivileged ISA and parts of the privileged ISA, namely M-mode. This is only the RISC-V core and does not include any other peripherals."
    },
    {
        "name": "BASIC Jit",
        "info": {
            "en": "A JIT compiler for the BASIC programming language",
            "de": "Ein JIT-Compiler für die Programmiersprache BASIC",
            "it": "Un compilatore JIT per il linguaggio di programmazione BASIC"
        },
        "link": "https://github.com/rolandbernard/basic-jit",
        "video": "basic-jit.mp4",
        "tags": [ "basic", "jit", "jit-compiler", "x86-64", "aarch64" ],
        "desc": "This is a small JIT compiler for a version of the BASIC programming language, running on the x86-64 or 64-bit ARM (aarch64) architecture."
    },
    {
        "name": "Marvin",
        "info": {
            "en": "A keystroke launcher for Linux",
            "de": "Ein Anwendungsstarter für Linux",
            "it": "Un lanciatore di applicazioni per Linux"
        },
        "link": "https://github.com/rolandbernard/marvin",
        "image": "marvin.jpeg",
        "tags": [ "launcher", "electron", "linux", "application-launcher", "menu" ],
        "desc": "This is a keystroke launcher for Linux. It is build using electron but it has not been ported to Windows or MacOs yet."
    },
    {
        "name": "Tumbleweed",
        "info": {
            "en": "A small compiled toy programming language",
            "de": "Eine kleine kompilierte Programmiersprache",
            "it": "Un piccolo linguaggio di programmazione compilato"
        },
        "link": "https://github.com/rolandbernard/tumbleweed",
        "image": "tumbleweed.jpeg",
        "tags": [ "llvm", "compiler", "programming-language" ],
        "desc": "Tumbleweed is a small strongly typed programming language. Just like real tumbleweed this programming language is useless and unwanted."
    },
    {
        "name": "Wakan",
        "info": {
            "en": "A small interpreted toy programming language",
            "de": "Eine kleine interpretierte Programmiersprache",
            "it": "Un piccolo linguaggio di programmazione interpretato"
        },
        "link": "https://github.com/rolandbernard/wakan",
        "image": "wakan.jpeg",
        "tags": [ "programming-language", "interpreter" ],
        "desc": "Wakan is a small programming language designed as an educational project. It was not designed for any particular application and is not complete."
    },
    {
        "name": "Roland Font",
        "info": {
            "en": "My first attempt at creating a font",
            "de": "Mein erster Versuch, eine Schriftart zu erstellen",
            "it": "Il mio primo tentativo di creare un font"
        },
        "link": "https://github.com/rolandbernard/roland-font",
        "video": "roland-font.mp4",
        "tags": [ "font" ],
        "desc": "I was wondering how one would go about creating a font. I did a bit of research and created this font as my first font using Inkscape, FontForge, Python, FontTools and Fontmake."
    },
    {
        "name": "Regex",
        "info": {
            "en": "A small regular expression C library",
            "de": "Eine C-Bibliothek für reguläre Ausdrücke",
            "it": "Una libreria C di espressioni regolari"
        },
        "link": "https://github.com/rolandbernard/regex",
        "image": "regex.jpeg",
        "tags": [ "regex", "regular-expression", "library" ],
        "desc": "A small regular expression library for C. This regex implementation first compiles the regex into a NFA and then transforms that NFA into a DFA. The DFA can then be appliend to an input string of length n in O(n)."
    },
    {
        "name": "Geo Draw",
        "info": {
            "en": "A simple web application for creating map visualizations",
            "de": "Eine Webanwendung zur Erstellung von Kartenvisualisierungen",
            "it": "Un'applicazione web per creare visualizzazioni di mappe"
        },
        "-iframe": "https://rolandbernard.github.io/geo-draw/#/demo/covid-world-newest",
        "link": "https://github.com/rolandbernard/geo-draw",
        "image": "geo-draw.jpeg",
        "tags": [ "visualization", "map", "lit-element", "lit-html", "rust" ],
        "desc": "This is a simple web application that allows the generation of map visualizations. All the processing happens on the client and the server can simply be a static web server. This is only a small project I started, to learn lit-html/LitElement, WebGl and try out the Rust programming language a bit more."
    },
    {
        "name": "Pathtrace",
        "info": {
            "en": "A simple path tracing implementation written in C",
            "de": "Eine path tracing Implementierung, geschrieben in C",
            "it": "Una implementazione di path tracing scritta in C"
        },
        "link": "https://github.com/rolandbernard/pathtrace",
        "image": "pathtrace.jpeg",
        "tags": [ "pathtracing", "c", "openmp", "experiment" ],
        "desc": "A simple path tracing implementation written in C. You should probably not use it because it is insanely slow and noisy."
    },
    {
        "name": "Parsed",
        "info": {
            "en": "A parser generator that generates recursive decent parsers",
            "de": "Ein Parser-Generator, der rekursive Parser erzeugt",
            "it": "Un generatore di parser che genera parser ricorsivi"
        },
        "link": "https://github.com/rolandbernard/parsed",
        "image": "parsed.jpeg",
        "tags": [ "parser", "parser-generator", "recursive-descent-parser" ],
        "desc": "A small parser generator that generates recursive descent parsers. It also generates a lexer form the token defined in the grammar.This parser generator is relatively simple. It can handle direct left recursion, but indirect recursion will result in an infinite loop."
    },
    {
        "name": "Simple Graphics",
        "info": "A simple general software 3D graphics API written in C",
        "link": "https://github.com/rolandbernard/sgx",
        "image": "sgx.jpeg",
        "tags": [ "3d-graphics", "graphics-api" ],
        "desc": "A simple general software 3D graphics API written in C. The implementation still needs a lot of optimisation."
    },
    {
        "name": "ryoko",
        "info": "A web application for easy task organization and management",
        "link": "https://github.com/rolandbernard/ryoko",
        "image": "ryoko.jpeg",
        "tags": [ "progressive-web-app", "single-page-app", "university-project", "teamwork", "task-manager" ],
        "desc": "A web application for easy task organization and management. Do you want to boost your productivity and agility of your development? With Ryoko you are able to effectively plan your tasks and manage your projects. It is build with developers in mind and facilitates effective collaboration."
    },
    {
        "name": "daro",
        "info": "Daro is a simple interpreted programming language written in Java",
        "link": "https://github.com/rolandbernard/daro",
        "image": "daro.jpeg",
        "tags": [ "game", "programming-language", "ide", "university-project" ],
        "desc": "We aimed to make a game that teaches people the basics of coding using a simple, self-designed programming language. The idea was to create simple puzzles with increasing difficulty that ask the player to solve programming-related problems, such as finding the minimum in an array, creating sums etc. In addition to the game, the language can also be used stand-alone using the cli interface of the interpreter or in the purpose build IDE."
    },
    {
        "name": "Tested",
        "info": "This is a small program to run language independent file based tests.",
        "link": "https://github.com/rolandbernard/tested",
        "image": "tested.jpeg",
        "tags": [ "testing", "testing-tools", "language-independent" ],
        "desc": "This is a small program to run language independent file based tests. The test runner will run all the test inside the given directories. Test instructions are specified using line comments at the very beginning of a file."
    },
    {
        "name": "Mandelbrot",
        "info": "Mandelbrot visualization written in C++ and OpenCL",
        "link": "https://github.com/rolandbernard/mandelbrot",
        "image": "mandelbrot.jpeg",
        "tags": [ "visualization", "opencl", "fractal", "mandelbrot" ],
        "desc": "Mandelbrot visualization written in C++ and OpenCL."
    },
    {
        "name": "Task Planner",
        "info": "This software tries to solve a version of the vehicle routing problem",
        "link": "https://github.com/rolandbernard/task-planner",
        "image": "task-planner.jpeg",
        "tags": [ "optimization", "cpp", "webassembly", "vrp", "genetic-algorithm", "react", "material-ui" ],
        "desc": "This software tries to solve a version of the vehicle routing problem. It uses a genetic algorithm to optimize the routes of multiple workers serving multiple clients at different locations with different priorities.The actual algorithm is implemented in C++ and is used by the UI, which is written using the React framework, using Web Assembly."
    },
    {
        "name": "Tinycloud",
        "info": "Web application focused on storing files",
        "link": "https://github.com/rolandbernard/tinycloud",
        "image": "tinycloud.jpeg",
        "tags": [ "cloud-storage", "web-application" ],
        "desc": "Tinycloud is a small web application focused on storing and sharing files."
    },
    {
        "name": "Terminal Image Renderer",
        "info": "A way to draw image buffers to termnal",
        "link": "https://github.com/rolandbernard/tir",
        "image": "tir.jpeg",
        "tags": [ "image-display", "terminal-based" ],
        "desc": "Implements a way to draw image buffers to termnal in C. The implementation only supports terminals with true color and the ability to display Unicode block characters."
    },
    {
        "name": "Suedtirol Weather",
        "info": "Web frontend for displaying the weather data of the Open Data Hub Südtirol",
        "link": "https://github.com/rolandbernard/suedtirol-weather",
        "image": "suedtirol-weather.jpeg",
        "tags": [ "open-data", "weather-app", "angular" ],
        "desc": "Web frontend for displaying the weather data of the Open Data Hub Südtirol, written using the Angular framework."
    },
    {
        "name": "Chat",
        "info": "A small chat server and client in the terminal",
        "link": "https://github.com/rolandbernard/chat",
        "image": "chat.jpeg",
        "tags": [ "chat", "socket-programming" ],
        "desc": "This is a simple chat server and client that can be run in the terminal."
    },
    {
        "name": "Calculator",
        "info": "One of my first programming projects",
        "link": "https://github.com/rolandbernard/calculator",
        "image": "calculator.jpeg",
        "tags": [ "calculator", "port", "old-project", "old-stuff" ],
        "desc": "This is one of my oldest projects, and as such it is quite bad. I myself don't realy know what exactly is going in. I wrote it before I had any formal education in computer science or programming. It was originaly developed to be run on a Arduino compatible microcontroller and was later ported to Visual C++ and SDL.I have now made the program compile and run using g++ or clang++. I have not changed more than neccesary, and therefore the program still contains memory leaks, compiling it will generate a lot of warnings and is generaly not programmed well."
    },
    {
        "name": "nopiano",
        "info": "Program playing a piano note for every key press",
        "link": "https://github.com/rolandbernard/nopiano",
        "tags": [ "music", "piano", "xlib", "portaudio" ],
        "desc": "Program playing a piano note for every key press. The application will grab the hole keyboard (You can leave using ESC). Every row of your keyboard will be assigned to one octave(A-G#). By pressing shift you can move everything up one octave and by pressing control down."
    },
    {
        "name": "A-Star",
        "info": "Visualization of the A-Star path finding algorithm written in java",
        "link": "https://github.com/rolandbernard/astart",
        "video": "astar.mp4",
        "tags": [ "visualization", "pathfinding" ],
        "desc": "Visualization of the A-Star path finding algorithm written in Java."
    },
    {
        "name": "Classroom",
        "info": "Virtual peer-to-peer classrooms throught a web application",
        "link": "https://github.com/rolandbernard/classroom",
        "image": "classroom.jpeg",
        "tags": [ "webrtc", "socket-io", "react", "material-ui", "quill" ],
        "desc": "This application was inspired by the COVID-19-Virus out brake and the resulting school closings in many countries. The application allows users to create new virtual classrooms and using the rooms id other users can join the room as listeners. The creator of a room is able to talk to the listeners and write in a rich text editor, all using peer-to-peer connections. The speaker can also allow certain listeners to talk and manipulate the editor. Listeners that have a question can use the 'Ask to speak' button to notify the speaker that they want to talk. The speaker also has the option to kick users if he so desires. There is no video, mainly because I find that to be useless and the fact that it would use up valuable bandwidth for people with a poor internet connection."
    }
]
